# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: 'Build'

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  workflow_dispatch: # Allow you to run this workflow manually from the Action tab
  
env:
      BUILD_CONFIGURATION: 'Release'
      BUILD_PLATFORM: 'AnyCPU'
      CSPROJ_PATH: 'HelloDeploy\HelloDeploy.csproj'
      PACKAGE_OUTPUT_DIRECTORY: ${{ github.workspace }}\HelloDeploy\bin\Release\app.publish
      HELLO_ARTIFACT_NAME: 'HelloDeploy'
      VERSION: '1.0.0.6'
jobs:

  build-and-publish:
    runs-on: windows-latest 
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
                    
    - name: 'Setup MSBuild'
      uses: microsoft/setup-msbuild@v1.3.1

    - name: 'Setup Nuget'
      uses: NuGet/setup-nuget@v1.2.0

    - name: 'Nuget Restore Packages'
      run: nuget restore "HelloClickOnce.sln"

    - name: "Build"
      run: msbuild ${{ env.CSPROJ_PATH }} /t:build /p:Configuration=${{ env.BUILD_CONFIGURATION }} /p:Platform=${{ env.BUILD_PLATFORM }}

    - name: "Publish"
      run: msbuild ${{ env.CSPROJ_PATH }} /t:publish /p:Configuration="${{ env.BUILD_CONFIGURATION }}" /p:Platform="${{ env.BUILD_PLATFORM }}" /p:ApplicationVersion="${{ env.VERSION }}" /p:MinimumRequiredVersion="${{ env.VERSION }}" /p:VersionAssembly="${{ env.VERSION }}"

    - name: "Upload Artifact"
      uses: actions/upload-artifact@v4.3.0
      with:
        name: ${{ env.CLICKONCE_ARTIFACT_NAME }}
        path: ${{ env.PACKAGE_OUTPUT_DIRECTORY }}
